import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Link, useNavigate } from "react-router-dom";
import { Trophy, ArrowRight, ArrowLeft } from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

const CreateTeam = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { toast } = useToast();
  const [teamName, setTeamName] = useState("");
  const [sport, setSport] = useState("");
  const [description, setDescription] = useState("");
  const [loading, setLoading] = useState(false);

  const handleCreateTeam = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user || !teamName.trim()) return;

    setLoading(true);
    try {
      // Create the team
      const { data: team, error: teamError } = await supabase
        .from('teams')
        .insert([{
          name: teamName,
          sport: sport || null,
          description: description || null,
          created_by: user.id,
          invite_code: '' // Will be auto-generated by trigger
        }])
        .select()
        .single();

      if (teamError) throw teamError;

      // Add creator as admin member
      const { error: memberError } = await supabase
        .from('team_members')
        .insert({
          team_id: team.id,
          user_id: user.id,
          role: 'admin'
        });

      if (memberError) throw memberError;

      toast({
        title: "Team created!",
        description: `${teamName} is ready. Share your invite code: ${team.invite_code}`,
      });

      navigate('/dashboard');
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to create team. Please try again.",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 flex items-center justify-center p-4">
      <Card className="w-full max-w-md p-8 space-y-6">
        <div className="space-y-2">
          <Button variant="ghost" onClick={() => navigate('/join-team')} className="mb-4">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Button>

          <div className="text-center space-y-2">
            <Link to="/" className="inline-flex items-center gap-2 mb-4">
              <Trophy className="h-8 w-8 text-primary" />
              <span className="text-2xl font-bold">GamePlan</span>
            </Link>
            <h1 className="text-3xl font-bold">Create Your Team</h1>
            <p className="text-muted-foreground">Set up your team in under a minute</p>
          </div>
        </div>

        <form onSubmit={handleCreateTeam} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="teamName">Team Name *</Label>
            <Input 
              id="teamName" 
              placeholder="Thunder Cycling Club" 
              value={teamName}
              onChange={(e) => setTeamName(e.target.value)}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="sport">Sport / Activity</Label>
            <Input 
              id="sport" 
              placeholder="e.g., Basketball, Running, Cycling" 
              value={sport}
              onChange={(e) => setSport(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea 
              id="description" 
              placeholder="Tell your team what this is about..." 
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={3}
            />
          </div>

          <Button 
            variant="hero" 
            className="w-full" 
            size="lg"
            type="submit"
            disabled={loading || !teamName.trim()}
          >
            {loading ? "Creating..." : "Create Team"}
            <ArrowRight className="h-4 w-4 ml-2" />
          </Button>
        </form>

        <p className="text-center text-sm text-muted-foreground">
          You'll receive an invite code to share with your team members
        </p>
      </Card>
    </div>
  );
};

export default CreateTeam;
